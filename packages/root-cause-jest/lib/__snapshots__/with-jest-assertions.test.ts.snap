// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sanity integration test with jest assertions 1`] = `
Object {
  "metadata": Object {
    "branchInfo": "noise_removed:branchInfo",
    "endedTimestamp": 30,
    "fileName": "noise_removed/packages/root-cause-jest/lib/with-jest-assertions.test.ts",
    "hasNetworkLogs": true,
    "systemInfo": Object {
      "automationFramework": "puppeteer",
      "browser": "chromium",
      "browserPlatform": "noise_removed:browserPlatform",
      "browserVersion": "HeadlessChrome/85.0.4182.0",
      "modelName": "noise_removed:modelName",
      "modelVersion": "noise_removed:modelVersion",
      "pageViewport": Object {
        "height": 600,
        "width": 800,
      },
      "userAgent": "noise_removed:userAgent",
    },
    "testEndStatus": Object {
      "error": Object {
        "message": "mocked error test failed",
        "name": "",
        "stack": "",
      },
      "success": false,
    },
    "testFullName": "Sanity integration test with jest assertions",
    "testName": "with jest assertions",
    "timestamp": 2,
  },
  "steps": Array [
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 4,
      "fnName": "goto",
      "index": 1,
      "name": "goto \\"http://jsbin.testim.io/ner/1\\"",
      "screenshot": "1.page-goto.jpg",
      "startTimestamp": 3,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "",
          "        const unhookExpect = makeHookExpect(attachController, currentTest.testPath);",
          "",
          "        await playedPage.goto('http://jsbin.testim.io/ner/1');",
          "        await playedPage.click('#test');",
          "",
          "        await playedPage.click('#test');",
        ],
        "column": 9,
        "fromRowNumber": 74,
        "row": 77,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 80,
      },
      "text": "http://jsbin.testim.io/ner/1",
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 6,
      "fnName": "click",
      "index": 2,
      "name": "click \\"#test\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "2.page-click.jpg",
      "selector": "#test",
      "startTimestamp": 5,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "        const unhookExpect = makeHookExpect(attachController, currentTest.testPath);",
          "",
          "        await playedPage.goto('http://jsbin.testim.io/ner/1');",
          "        await playedPage.click('#test');",
          "",
          "        await playedPage.click('#test');",
          "        await playedPage.click('#test');",
        ],
        "column": 9,
        "fromRowNumber": 75,
        "row": 78,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 81,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 8,
      "fnName": "click",
      "index": 3,
      "name": "click \\"#test\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "3.page-click.jpg",
      "selector": "#test",
      "startTimestamp": 7,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "        await playedPage.goto('http://jsbin.testim.io/ner/1');",
          "        await playedPage.click('#test');",
          "",
          "        await playedPage.click('#test');",
          "        await playedPage.click('#test');",
          "",
          "        await playedPage.click('#test');",
        ],
        "column": 9,
        "fromRowNumber": 77,
        "row": 80,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 83,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 10,
      "fnName": "click",
      "index": 4,
      "name": "click \\"#test\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "4.page-click.jpg",
      "selector": "#test",
      "startTimestamp": 9,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "        await playedPage.click('#test');",
          "",
          "        await playedPage.click('#test');",
          "        await playedPage.click('#test');",
          "",
          "        await playedPage.click('#test');",
          "        const counterEl = await playedPage.$('#counter');",
        ],
        "column": 9,
        "fromRowNumber": 78,
        "row": 81,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 84,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 12,
      "fnName": "click",
      "index": 5,
      "name": "click \\"#test\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "5.page-click.jpg",
      "selector": "#test",
      "startTimestamp": 11,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "        await playedPage.click('#test');",
          "        await playedPage.click('#test');",
          "",
          "        await playedPage.click('#test');",
          "        const counterEl = await playedPage.$('#counter');",
          "",
          "        expect(counterEl).not.toBe(null);",
        ],
        "column": 9,
        "fromRowNumber": 80,
        "row": 83,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 86,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "fnName": "assertion",
      "index": 6,
      "name": "expect(instanceof(ElementHandle)).not.toBe(null)",
      "startTimestamp": 13,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "        await playedPage.click('#test');",
          "        const counterEl = await playedPage.$('#counter');",
          "",
          "        expect(counterEl).not.toBe(null);",
          "",
          "        utils.assertNotNullOrUndefined(counterEl);",
          "",
        ],
        "column": 31,
        "fromRowNumber": 83,
        "row": 86,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 89,
      },
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 15,
      "fnName": "getProperty",
      "index": 7,
      "name": "getProperty",
      "screenshot": "7.elementhandle-getProperty.jpg",
      "startTimestamp": 14,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "",
          "        utils.assertNotNullOrUndefined(counterEl);",
          "",
          "        const text = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
          "        expect(text).toBe('4');",
          "",
        ],
        "column": 29,
        "fromRowNumber": 87,
        "row": 90,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 93,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "fnName": "assertion",
      "index": 8,
      "name": "expect(4).toBe(4)",
      "startTimestamp": 16,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "",
          "        const text = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
          "        expect(text).toBe('4');",
          "",
          "        await playedPage.click('#reset');",
          "",
        ],
        "column": 22,
        "fromRowNumber": 89,
        "row": 92,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 95,
      },
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 18,
      "fnName": "click",
      "index": 9,
      "name": "click \\"#reset\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "9.page-click.jpg",
      "selector": "#reset",
      "startTimestamp": 17,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "",
          "        expect(text).toBe('4');",
          "",
          "        await playedPage.click('#reset');",
          "",
          "        const text2 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
        ],
        "column": 9,
        "fromRowNumber": 91,
        "row": 94,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 97,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 20,
      "fnName": "getProperty",
      "index": 10,
      "name": "getProperty",
      "screenshot": "10.elementhandle-getProperty.jpg",
      "startTimestamp": 19,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "",
          "        await playedPage.click('#reset');",
          "",
          "        const text2 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
          "        expect(text2).toBe('0');",
          "",
        ],
        "column": 30,
        "fromRowNumber": 93,
        "row": 96,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 99,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "fnName": "assertion",
      "index": 11,
      "name": "expect(0).toBe(0)",
      "startTimestamp": 21,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "",
          "        const text2 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
          "        expect(text2).toBe('0');",
          "",
          "        const allButtons = await playedPage.$$('button');",
          "",
        ],
        "column": 23,
        "fromRowNumber": 95,
        "row": 98,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 101,
      },
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 23,
      "fnName": "click",
      "index": 12,
      "name": "click",
      "screenshot": "12.elementhandle-click.jpg",
      "startTimestamp": 22,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "",
          "        const allButtons = await playedPage.$$('button');",
          "",
          "        await allButtons[0].click();",
          "",
          "        const text3 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
        ],
        "column": 9,
        "fromRowNumber": 99,
        "row": 102,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 105,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 25,
      "fnName": "getProperty",
      "index": 13,
      "name": "getProperty",
      "screenshot": "13.elementhandle-getProperty.jpg",
      "startTimestamp": 24,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "",
          "        await allButtons[0].click();",
          "",
          "        const text3 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
          "        expect(text3).toBe('1');",
          "",
        ],
        "column": 30,
        "fromRowNumber": 101,
        "row": 104,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 107,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "fnName": "assertion",
      "index": 14,
      "name": "expect(1).toBe(1)",
      "startTimestamp": 26,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "",
          "        const text3 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
          "        expect(text3).toBe('1');",
          "",
          "        expect(allButtons).toHaveLength(2);",
          "",
        ],
        "column": 23,
        "fromRowNumber": 103,
        "row": 106,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 109,
      },
    },
    Object {
      "fnName": "assertion",
      "index": 15,
      "name": "expect(Array(length=2)).toHaveLength(2)",
      "startTimestamp": 27,
      "stepCodeLocation": Object {
        "codeLines": Array [
          "",
          "        expect(text3).toBe('1');",
          "",
          "        expect(allButtons).toHaveLength(2);",
          "",
          "        await endTest({",
          "            success: false,",
        ],
        "column": 28,
        "fromRowNumber": 105,
        "row": 108,
        "sourceFileRelativePath": "lib/with-jest-assertions.test.ts",
        "toRowNumber": 111,
      },
    },
    Object {
      "endTimestamp": 29,
      "fnName": "Assertion Error",
      "index": 16,
      "name": "Assertion Error \\"mocked error test failed\\"",
      "rect": Object {
        "error": "possible noise removed",
      },
      "screenshot": null,
      "startTimestamp": 28,
      "stepError": Object {
        "message": "mocked error test failed",
        "name": "",
        "stack": "",
      },
      "text": "mocked error test failed",
    },
  ],
}
`;
