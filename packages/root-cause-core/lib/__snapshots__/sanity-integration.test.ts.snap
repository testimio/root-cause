// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sanity integration test Sanity integration test 1 1`] = `
Object {
  "metadata": Object {
    "branchInfo": "noise_removed:branchInfo",
    "endedTimestamp": 33,
    "fileName": "noise_removed/packages/root-cause-core/lib/sanity-integration.test.ts",
    "hasNetworkLogs": true,
    "systemInfo": Object {
      "automationFramework": "puppeteer",
      "browser": "chromium",
      "browserPlatform": "noise_removed:browserPlatform",
      "browserVersion": "HeadlessChrome/86.0.4240.0",
      "modelName": "noise_removed:modelName",
      "modelVersion": "noise_removed:modelVersion",
      "pageViewport": Object {
        "height": 600,
        "width": 800,
      },
      "userAgent": "noise_removed:userAgent",
    },
    "testEndStatus": Object {
      "codeLocationDetails": Object {
        "callstack": Array [
          Object {
            "column": 29,
            "file": "lib/assortedHooks.ts",
            "function": "testEndHook",
            "line": 118,
          },
          Object {
            "column": 15,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "PuppeteerPageHooker.end",
            "line": 188,
          },
          Object {
            "column": 5,
            "file": "lib/attach.ts",
            "function": "endTest",
            "line": 115,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 136,
          },
        ],
        "codeLines": Array [
          "",
          "    await playedPage.mouse.move(10, 20);",
          "",
          "    await endTest({",
          "      success: false,",
          "      error: { message: 'mocked error test failed' },",
          "    });",
        ],
        "column": 5,
        "fromRowNumber": 133,
        "row": 136,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 139,
      },
      "error": Object {
        "message": "mocked error test failed",
        "name": "",
        "stack": "",
      },
      "success": false,
    },
    "testFullName": "Sanity integration test Sanity integration test 1",
    "testName": "Sanity integration test 1",
    "timestamp": 2,
  },
  "steps": Array [
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 4,
      "fnName": "goto",
      "index": 1,
      "mhtmlFile": "1.document.mhtml",
      "name": "goto \\"http://jsbin.testim.io/ner/1\\"",
      "screenshot": "1.page-goto.jpg",
      "startTimestamp": 3,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 18,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction_Page_goto",
            "line": 156,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 89,
          },
        ],
        "codeLines": Array [
          "      mockedDateConstructor",
          "    );",
          "",
          "    await playedPage.goto('http://jsbin.testim.io/ner/1');",
          "    await playedPage.click('#test');",
          "    // to await - might be flaky",
          "    page.evaluate(() => {",
        ],
        "column": 5,
        "fromRowNumber": 86,
        "row": 89,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 92,
      },
      "text": "http://jsbin.testim.io/ner/1",
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 6,
      "fnName": "click",
      "index": 2,
      "mhtmlFile": "2.document.mhtml",
      "name": "click \\"#test\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "2.page-click.jpg",
      "selector": "#test",
      "startTimestamp": 5,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 18,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction_Page_click",
            "line": 156,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 90,
          },
        ],
        "codeLines": Array [
          "    );",
          "",
          "    await playedPage.goto('http://jsbin.testim.io/ner/1');",
          "    await playedPage.click('#test');",
          "    // to await - might be flaky",
          "    page.evaluate(() => {",
          "      setTimeout(() => {",
        ],
        "column": 5,
        "fromRowNumber": 87,
        "row": 90,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 93,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 9,
      "fnName": "click",
      "index": 3,
      "mhtmlFile": "3.document.mhtml",
      "name": "click \\"#test\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "3.page-click.jpg",
      "selector": "#test",
      "startTimestamp": 7,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 18,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction_Page_click",
            "line": 156,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 97,
          },
        ],
        "codeLines": Array [
          "        throw new Error('injected error');",
          "      }, 0);",
          "    });",
          "    await playedPage.click('#test');",
          "    await playedPage.click('#test');",
          "    // to await - might be flaky",
          "    page.evaluate(() => {",
        ],
        "column": 5,
        "fromRowNumber": 94,
        "row": 97,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 100,
      },
      "unhandledExceptions": Array [
        Object {
          "message": "injected error",
          "stack": "Error: injected error
    at __puppeteer_evaluation_script__:3:23",
          "timestamp": 8,
        },
      ],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 11,
      "fnName": "click",
      "index": 4,
      "mhtmlFile": "4.document.mhtml",
      "name": "click \\"#test\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "4.page-click.jpg",
      "selector": "#test",
      "startTimestamp": 10,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 18,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction_Page_click",
            "line": 156,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 98,
          },
        ],
        "codeLines": Array [
          "      }, 0);",
          "    });",
          "    await playedPage.click('#test');",
          "    await playedPage.click('#test');",
          "    // to await - might be flaky",
          "    page.evaluate(() => {",
          "      setTimeout(() => {",
        ],
        "column": 5,
        "fromRowNumber": 95,
        "row": 98,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 101,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [
        Object {
          "args": Array [
            "\\"injected console\\"",
          ],
          "column": 24,
          "level": "warning",
          "line": 3,
          "text": "injected console",
          "timestamp": 13,
          "url": "__puppeteer_evaluation_script__",
        },
      ],
      "endTimestamp": 14,
      "fnName": "click",
      "index": 5,
      "mhtmlFile": "5.document.mhtml",
      "name": "click \\"#test\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "5.page-click.jpg",
      "selector": "#test",
      "startTimestamp": 12,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 18,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction_Page_click",
            "line": 156,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 106,
          },
        ],
        "codeLines": Array [
          "        console.warn('injected console');",
          "      }, 0);",
          "    });",
          "    await playedPage.click('#test');",
          "    const counterEl = await playedPage.$('#counter');",
          "",
          "    assert.notEqual(counterEl, null);",
        ],
        "column": 5,
        "fromRowNumber": 103,
        "row": 106,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 109,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 16,
      "fnName": "$",
      "index": 6,
      "mhtmlFile": "6.document.mhtml",
      "name": "$ \\"#counter\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "6.page-$.jpg",
      "selector": "#counter",
      "startTimestamp": 15,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 30,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.returningElementHandlesViaPromiseWrappedFunction_Page_$",
            "line": 122,
          },
          Object {
            "column": 23,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 107,
          },
        ],
        "codeLines": Array [
          "      }, 0);",
          "    });",
          "    await playedPage.click('#test');",
          "    const counterEl = await playedPage.$('#counter');",
          "",
          "    assert.notEqual(counterEl, null);",
          "    assertNotNullOrUndefined(counterEl);",
        ],
        "column": 23,
        "fromRowNumber": 104,
        "row": 107,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 110,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 18,
      "fnName": "getProperty",
      "index": 7,
      "mhtmlFile": "7.document.mhtml",
      "name": "getProperty \\"innerText\\" on \\"#counter\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "7.elementhandle-getProperty.jpg",
      "selector": "#counter",
      "startTimestamp": 17,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 18,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction_ElementHandle_getProperty",
            "line": 156,
          },
          Object {
            "column": 25,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 112,
          },
        ],
        "codeLines": Array [
          "    assert.notEqual(counterEl, null);",
          "    assertNotNullOrUndefined(counterEl);",
          "",
          "    const text = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
          "    assert.equal(text, '4');",
          "",
        ],
        "column": 25,
        "fromRowNumber": 109,
        "row": 112,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 115,
      },
      "text": "innerText",
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 20,
      "fnName": "click",
      "index": 8,
      "mhtmlFile": "8.document.mhtml",
      "name": "click \\"#reset\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "8.page-click.jpg",
      "selector": "#reset",
      "startTimestamp": 19,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 18,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction_Page_click",
            "line": 156,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 116,
          },
        ],
        "codeLines": Array [
          "",
          "    assert.equal(text, '4');",
          "",
          "    await playedPage.click('#reset');",
          "",
          "    const text2 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
        ],
        "column": 5,
        "fromRowNumber": 113,
        "row": 116,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 119,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 22,
      "fnName": "getProperty",
      "index": 9,
      "mhtmlFile": "9.document.mhtml",
      "name": "getProperty \\"innerText\\" on \\"#counter\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "9.elementhandle-getProperty.jpg",
      "selector": "#counter",
      "startTimestamp": 21,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 18,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction_ElementHandle_getProperty",
            "line": 156,
          },
          Object {
            "column": 26,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 118,
          },
        ],
        "codeLines": Array [
          "",
          "    await playedPage.click('#reset');",
          "",
          "    const text2 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
          "    assert.equal(text2, '0');",
          "",
        ],
        "column": 26,
        "fromRowNumber": 115,
        "row": 118,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 121,
      },
      "text": "innerText",
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 24,
      "fnName": "$$",
      "index": 10,
      "mhtmlFile": "10.document.mhtml",
      "name": "$$ \\"button\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "10.page-$$.jpg",
      "selector": "button",
      "startTimestamp": 23,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 30,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.returningElementHandlesViaPromiseWrappedFunction_Page_$$",
            "line": 122,
          },
          Object {
            "column": 24,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 122,
          },
        ],
        "codeLines": Array [
          "",
          "    assert.equal(text2, '0');",
          "",
          "    const allButtons = await playedPage.$$('button');",
          "",
          "    await allButtons[0].click();",
          "",
        ],
        "column": 24,
        "fromRowNumber": 119,
        "row": 122,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 125,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 26,
      "fnName": "click",
      "index": 11,
      "mhtmlFile": "11.document.mhtml",
      "name": "click \\"button[0]\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "11.elementhandle-click.jpg",
      "selector": "button[0]",
      "startTimestamp": 25,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 18,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction_ElementHandle_click",
            "line": 156,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 124,
          },
        ],
        "codeLines": Array [
          "",
          "    const allButtons = await playedPage.$$('button');",
          "",
          "    await allButtons[0].click();",
          "",
          "    const text3 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
        ],
        "column": 5,
        "fromRowNumber": 121,
        "row": 124,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 127,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 28,
      "fnName": "getProperty",
      "index": 12,
      "mhtmlFile": "12.document.mhtml",
      "name": "getProperty \\"innerText\\" on \\"#counter\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "12.elementhandle-getProperty.jpg",
      "selector": "#counter",
      "startTimestamp": 27,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 18,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction_ElementHandle_getProperty",
            "line": 156,
          },
          Object {
            "column": 26,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 126,
          },
        ],
        "codeLines": Array [
          "",
          "    await allButtons[0].click();",
          "",
          "    const text3 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
          "    assert.equal(text3, '1');",
          "",
        ],
        "column": 26,
        "fromRowNumber": 123,
        "row": 126,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 129,
      },
      "text": "innerText",
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 30,
      "fnName": "type",
      "index": 13,
      "mhtmlFile": "13.document.mhtml",
      "name": "type \\"should do nothing\\"",
      "screenshot": "13.keyboard-type.jpg",
      "startTimestamp": 29,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 18,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction_Keyboard_type",
            "line": 156,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 132,
          },
        ],
        "codeLines": Array [
          "",
          "    assert.equal(allButtons.length, 2);",
          "",
          "    await playedPage.keyboard.type('should do nothing');",
          "",
          "    await playedPage.mouse.move(10, 20);",
          "",
        ],
        "column": 5,
        "fromRowNumber": 129,
        "row": 132,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 135,
      },
      "text": "should do nothing",
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 32,
      "fnName": "move",
      "index": 14,
      "mhtmlFile": "14.document.mhtml",
      "name": "move \\"[10,20]\\"",
      "screenshot": "14.mouse-move.jpg",
      "startTimestamp": 31,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 18,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction_Mouse_move",
            "line": 156,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 134,
          },
        ],
        "codeLines": Array [
          "",
          "    await playedPage.keyboard.type('should do nothing');",
          "",
          "    await playedPage.mouse.move(10, 20);",
          "",
          "    await endTest({",
          "      success: false,",
        ],
        "column": 5,
        "fromRowNumber": 131,
        "row": 134,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 137,
      },
      "text": "[10,20]",
      "unhandledExceptions": Array [],
    },
  ],
}
`;
