// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sanity integration test Sanity integration test 1 1`] = `
Object {
  "metadata": Object {
    "branchInfo": "noise_removed:branchInfo",
    "endedTimestamp": 25,
    "fileName": "noise_removed/packages/root-cause-core/lib/sanity-integration.test.ts",
    "hasNetworkLogs": true,
    "systemInfo": Object {
      "automationFramework": "puppeteer",
      "browser": "chromium",
      "browserPlatform": "noise_removed:browserPlatform",
      "browserVersion": "HeadlessChrome/85.0.4182.0",
      "modelName": "noise_removed:modelName",
      "modelVersion": "noise_removed:modelVersion",
      "pageViewport": Object {
        "height": 600,
        "width": 800,
      },
      "userAgent": "noise_removed:userAgent",
    },
    "testEndStatus": Object {
      "codeLocationDetails": Object {
        "callstack": Array [
          Object {
            "column": 29,
            "file": "lib/assortedHooks.ts",
            "function": "testEndHook",
            "line": 122,
          },
          Object {
            "column": 15,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "PuppeteerPageHooker.end",
            "line": 188,
          },
          Object {
            "column": 5,
            "file": "lib/attach.ts",
            "function": "endTest",
            "line": 110,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 120,
          },
        ],
        "codeLines": Array [
          "",
          "    assert.equal(allButtons.length, 2);",
          "",
          "    await endTest({",
          "      success: false,",
          "      error: { message: 'mocked error test failed' },",
          "    });",
        ],
        "column": 5,
        "fromRowNumber": 117,
        "row": 120,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 123,
      },
      "error": Object {
        "message": "mocked error test failed",
        "name": "",
        "stack": "",
      },
      "success": false,
    },
    "testFullName": "Sanity integration test Sanity integration test 1",
    "testName": "Sanity integration test 1",
    "timestamp": 2,
  },
  "steps": Array [
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 4,
      "fnName": "goto",
      "index": 1,
      "name": "goto \\"http://jsbin.testim.io/ner/1\\"",
      "screenshot": "1.page-goto.jpg",
      "startTimestamp": 3,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 21,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction",
            "line": 130,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 77,
          },
        ],
        "codeLines": Array [
          "      mockedDateConstructor",
          "    );",
          "",
          "    await playedPage.goto('http://jsbin.testim.io/ner/1');",
          "    await playedPage.click('#test');",
          "    // to await - might be flaky",
          "    page.evaluate(() => {",
        ],
        "column": 5,
        "fromRowNumber": 74,
        "row": 77,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 80,
      },
      "text": "http://jsbin.testim.io/ner/1",
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 6,
      "fnName": "click",
      "index": 2,
      "name": "click \\"#test\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "2.page-click.jpg",
      "selector": "#test",
      "startTimestamp": 5,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 21,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction",
            "line": 130,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 78,
          },
        ],
        "codeLines": Array [
          "    );",
          "",
          "    await playedPage.goto('http://jsbin.testim.io/ner/1');",
          "    await playedPage.click('#test');",
          "    // to await - might be flaky",
          "    page.evaluate(() => {",
          "      setTimeout(() => {",
        ],
        "column": 5,
        "fromRowNumber": 75,
        "row": 78,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 81,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 9,
      "fnName": "click",
      "index": 3,
      "name": "click \\"#test\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "3.page-click.jpg",
      "selector": "#test",
      "startTimestamp": 7,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 21,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction",
            "line": 130,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 85,
          },
        ],
        "codeLines": Array [
          "        throw new Error('injected error');",
          "      }, 0);",
          "    });",
          "    await playedPage.click('#test');",
          "    await playedPage.click('#test');",
          "    // to await - might be flaky",
          "    page.evaluate(() => {",
        ],
        "column": 5,
        "fromRowNumber": 82,
        "row": 85,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 88,
      },
      "unhandledExceptions": Array [
        Object {
          "message": "injected error",
          "stack": "Error: injected error
    at __puppeteer_evaluation_script__:3:23",
          "timestamp": 8,
        },
      ],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 11,
      "fnName": "click",
      "index": 4,
      "name": "click \\"#test\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "4.page-click.jpg",
      "selector": "#test",
      "startTimestamp": 10,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 21,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction",
            "line": 130,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 86,
          },
        ],
        "codeLines": Array [
          "      }, 0);",
          "    });",
          "    await playedPage.click('#test');",
          "    await playedPage.click('#test');",
          "    // to await - might be flaky",
          "    page.evaluate(() => {",
          "      setTimeout(() => {",
        ],
        "column": 5,
        "fromRowNumber": 83,
        "row": 86,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 89,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [
        Object {
          "args": Array [
            "\\"injected console\\"",
          ],
          "column": 24,
          "level": "warning",
          "line": 3,
          "text": "injected console",
          "timestamp": 13,
          "url": "__puppeteer_evaluation_script__",
        },
      ],
      "endTimestamp": 14,
      "fnName": "click",
      "index": 5,
      "name": "click \\"#test\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "5.page-click.jpg",
      "selector": "#test",
      "startTimestamp": 12,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 21,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction",
            "line": 130,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 94,
          },
        ],
        "codeLines": Array [
          "        console.warn('injected console');",
          "      }, 0);",
          "    });",
          "    await playedPage.click('#test');",
          "    const counterEl = await playedPage.$('#counter');",
          "",
          "    assert.notEqual(counterEl, null);",
        ],
        "column": 5,
        "fromRowNumber": 91,
        "row": 94,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 97,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 16,
      "fnName": "getProperty",
      "index": 6,
      "name": "getProperty",
      "screenshot": "6.elementhandle-getProperty.jpg",
      "startTimestamp": 15,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 21,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction",
            "line": 130,
          },
          Object {
            "column": 25,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 100,
          },
        ],
        "codeLines": Array [
          "    assert.notEqual(counterEl, null);",
          "    assertNotNullOrUndefined(counterEl);",
          "",
          "    const text = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
          "    assert.equal(text, '4');",
          "",
        ],
        "column": 25,
        "fromRowNumber": 97,
        "row": 100,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 103,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 18,
      "fnName": "click",
      "index": 7,
      "name": "click \\"#reset\\"",
      "rect": Object {
        "bottom": "possible noise removed",
        "devicePixelRatio": "possible noise removed",
        "height": "possible noise removed",
        "left": "possible noise removed",
        "right": "possible noise removed",
        "screenHeight": "possible noise removed",
        "screenWidth": "possible noise removed",
        "top": "possible noise removed",
        "width": "possible noise removed",
        "x": "possible noise removed",
        "y": "possible noise removed",
      },
      "screenshot": "7.page-click.jpg",
      "selector": "#reset",
      "startTimestamp": 17,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 21,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction",
            "line": 130,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 104,
          },
        ],
        "codeLines": Array [
          "",
          "    assert.equal(text, '4');",
          "",
          "    await playedPage.click('#reset');",
          "",
          "    const text2 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
        ],
        "column": 5,
        "fromRowNumber": 101,
        "row": 104,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 107,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 20,
      "fnName": "getProperty",
      "index": 8,
      "name": "getProperty",
      "screenshot": "8.elementhandle-getProperty.jpg",
      "startTimestamp": 19,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 21,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction",
            "line": 130,
          },
          Object {
            "column": 26,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 106,
          },
        ],
        "codeLines": Array [
          "",
          "    await playedPage.click('#reset');",
          "",
          "    const text2 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
          "    assert.equal(text2, '0');",
          "",
        ],
        "column": 26,
        "fromRowNumber": 103,
        "row": 106,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 109,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 22,
      "fnName": "click",
      "index": 9,
      "name": "click",
      "screenshot": "9.elementhandle-click.jpg",
      "startTimestamp": 21,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 21,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction",
            "line": 130,
          },
          Object {
            "column": 5,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 112,
          },
        ],
        "codeLines": Array [
          "",
          "    const allButtons = await playedPage.$$('button');",
          "",
          "    await allButtons[0].click();",
          "",
          "    const text3 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
        ],
        "column": 5,
        "fromRowNumber": 109,
        "row": 112,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 115,
      },
      "unhandledExceptions": Array [],
    },
    Object {
      "consoleEntries": Array [],
      "endTimestamp": 24,
      "fnName": "getProperty",
      "index": 10,
      "name": "getProperty",
      "screenshot": "10.elementhandle-getProperty.jpg",
      "startTimestamp": 23,
      "stepCodeLocation": Object {
        "callstack": Array [
          Object {
            "column": 21,
            "file": "lib/PuppeteerPageHooker.ts",
            "function": "Proxy.rootCauseWrappedFunction",
            "line": 130,
          },
          Object {
            "column": 26,
            "file": "lib/sanity-integration.test.ts",
            "function": "Object.<anonymous>",
            "line": 114,
          },
        ],
        "codeLines": Array [
          "",
          "    await allButtons[0].click();",
          "",
          "    const text3 = await (await counterEl.getProperty('innerText')).jsonValue();",
          "",
          "    assert.equal(text3, '1');",
          "",
        ],
        "column": 26,
        "fromRowNumber": 111,
        "row": 114,
        "sourceFileRelativePath": "lib/sanity-integration.test.ts",
        "toRowNumber": 117,
      },
      "unhandledExceptions": Array [],
    },
  ],
}
`;
